evaluateFile:`Stack.lkn`.

Class new:Sorter
	implements:[:selectionSortArray|
		Interval new from:1 to: (selectionSortArray size + 1) step:1 do:[:i|
			min:= i.
			Interval new from:i to:(selectionSortArray size+1) step:1 do:[:j|
				( (selectionSortArray at:j) < (selectionSortArray at:i)) ifTrue:[
				  min:=j
				]
			].
			selectionSortArray swap:min with:i.
		].
	];
	implements:[:insertionSortArray|locals:i j m n.
		n:=insertionSortArray size.
		(n <2 )ifTrue:[^Nil].
		(n==2)ifTrue:[
			((insertionSortArray at:1)>(insertionSortArray at:2))ifTrue:[
				(insertionSortArray swap:1 with: 2).^Nil]
		].
		i:=2. m:=insertionSortArray at:1.
		j:=1.
		[i<=n] whileTrue:[
			((insertionSortArray at:i) < m) ifTrue:[
				j:=i. m:=(insertionSortArray at:i).
			].
			i:=i+1.
		].
		insertionSortArray swap:1 with:j.
		i:=2.		
		[i <= n] whileTrue:[
			m:= insertionSortArray at:i.
			j:=i.
			[(insertionSortArray at:(j-1)) > m] whileTrue:[
				insertionSortArray at:j put:(insertionSortArray at:(j-1)).
				j:=j-1.
			].
			insertionSortArray at:(j) put:m.
			i:=i+1.
		].		
	];
	implements:[:bubbleSortArray|locals: n i j.
		n:=bubbleSortArray size.
		(n < 2)ifTrue:[^Nil].
		i:=n.
		[i > 1] whileTrue:[
			j:=2.
			[j <= i] whileTrue:[
				((bubbleSortArray at:(j-1)) > (bubbleSortArray at:j))
					ifTrue:[bubbleSortArray swap:(j-1) with:j].
				j:=j+1.
			].
			i:=i-1.
		]
	];
	implements:[:shellSortArray|locals: i j h v n n9.
		n:=shellSortArray size.
		n9:=n/9.
		h:=1.
		[h <= n9] whileTrue:[h:=3*h+1].
		[h>0] whileTrue:[
			i:= h+1.
			[i<=n]whileTrue:[
				v:= shellSortArray at:i.
				j:=i.
				[(j>h)&& ((shellSortArray at:(j-h))>v)] whileTrue:[
					shellSortArray at:(j) put:(shellSortArray at:(j-h)).
					j:= j-h.
				].
				shellSortArray at:j put:v.
				i:=i+1.
			].				
			h:=h/3.
		].		
	];
	
	implements:[:partitionArray:l:r|locals:i j v c.
		(r>l)ifTrue:[
			v:=partitionArray at:r.
			i:=l-1.
			j:=r.
			c:=True.
			[c==True] whileTrue:[
				i:=i+1.
				[(i <= r)&&((partitionArray at:i) < v)] whileTrue:[i:=i+1].
				j:=j-1.
				[(j > 1) && ((partitionArray at:j) > v)] whileTrue:[
					j:=j-1.
				].
				(i >= j)
					ifTrue:[ c:=False]
					ifFalse:[partitionArray swap:i with:j].
			].
			partitionArray swap:i with:r.
			^i.
		]
	];
	
	implements:[:partitionArrayMy:l:r|locals:i j c v.
		v:= partitionArrayMy at:r.
		(r<2)ifTrue:[^1].
		(r==2)ifTrue:[
		  ((partitionArrayMy at:1)>v)ifTrue:[
			partitionArrayMy swap:1 with:2.
			^1]
		].
		i:=l.
		j:=r-1.
		c:= True.
		[c==True]whileTrue:[
			[(partitionArrayMy at:i) < v]whileTrue:[i:=i+1].
			[((j>1)&&((partitionArrayMy at:j) > v))]whileTrue:[j:=j-1].
			(i<j)ifTrue:[
				partitionArrayMy swap:i with:j.
				i:=i+1.
				j:=j-1.
			]ifFalse:[c:=False]
		].
		partitionArrayMy swap:i with:r.
		^i.
	];	
	implements:[:quickSortArray:l:r|locals:i.
		(r>l)ifTrue:[
			i:= partitionArrayMy:quickSortArray l:l r:r.
			quickSortArray:quickSortArray l:l r:(i-1).
			quickSortArray:quickSortArray l:(i+1) r:r.
		]
	];
	implements:[:quickSortArrayNR:left:right|locals:i sf c l r.
		r:=right.
		l:=left.
		sf:=Stack new.
		c:=True.
		[c==True] whileTrue:[
			[r>l] whileTrue:[
				i:= partitionArrayMy:quickSortArrayNR l:l r:r.
				((i-1)>(r-i))ifTrue:[
					sf push:l.
					sf push:(i-1).
					l:=i+1.
				]ifFalse:[
					sf push:(i+1).
					sf push:r.
					r:=i-1
				]
			].
			(sf isEmpty) ifTrue:[
				c:=False
			]ifFalse:[
				r:= sf pop.
				l:= sf pop.
			]			
		].
	];
	implements:[:quickSortArrayNRO:left:right|locals:i sf c l r.
		r:=right.
		l:=left.
		sf:=Stack new.
		c:=True.
		[c==True] whileTrue:[
			[r>l] whileTrue:[
				i:= partitionArrayMy:quickSortArrayNRO l:l r:r.
				((i-1)>(r-i))ifTrue:[
					((i-1)==l)ifFalse:[
						sf push:l.
						sf push:(i-1).
					].
					l:=i+1.
				]ifFalse:[
					((i+1) == r)ifFalse:[
						sf push:(i+1).
						sf push:r.
					].
					r:=i-1
				]
			].
			(sf isEmpty) ifTrue:[
				c:=False
			]ifFalse:[
				r:= sf pop.
				l:= sf pop.
			]			
		].
	];
	implements:[:downheapArray:rightIndex:index|locals:j v to n a k.
		a:=downheapArray.
		k:=index.
		v:=a at:k.
		n:=rightIndex.
		to:= n/2.
		[k <= to] whileTrue:[
		   j:=k+k.
		   ((j<n) && ((a at:j) < (a at:(j+1))))ifTrue:[j:=j+1].
		   ((a at:j) < v)ifTrue:[
			  a at:k put:(a at:j).
			  k:=j.
		   ]ifFalse:[
		      to:=k-1.
		   ]
		].
		a at:k put:v.		
	];
	implements:[:downHeapArr:right:idx|
		(right<2)ifTrue:[^Nil].
		v:= downHeapArr at:idx.
		p:=idx.
		c:=p+p.
		rc:=c+1.
		(rc <= right)ifTrue:[
			((downHeapArr at:rc) > (downHeapArr at:c))ifTrue:[c:=rc]].
		[(c <= right)&&((downHeapArr at:c)>v)] whileTrue:[
			downHeapArr at:p put:(downHeapArr at:c).
			p:=c.
			c:=p+p.
			rc:=c+1.
			(rc <= right)ifTrue:[
				((downHeapArr at:rc) > (downHeapArr at:c))ifTrue:[c:=rc]].
		].
		downHeapArr at:p put:(v).
	];
	implements:[:heapSortArray:rIndex|locals:n k.
		n:=rIndex.
		
		(n<2)ifTrue:[^Nil].
		k:=n/2.
		[ k >= 1 ]whileTrue:[
			downHeapArr:heapSortArray right:n idx:k.
			k:=k-1.
		].
		[n>1]whileTrue:[
			heapSortArray swap:1 with:n.
			n:=n-1.
			downHeapArr:heapSortArray right:n idx:1. 
		].
	];
	implements:[:mergeCollection:withCollection|locals:ret.
		ret:= (mergeCollection class) new.
		lsize:= mergeCollection size.
		rsize:= withCollection size.
		len:=lsize+rsize.
		inidx:=1.
		lidx:=1.
		ridx:=1.
		[inidx <= len]whileTrue:[
			((lidx <= lsize)&& (ridx <=rsize)) ifTrue:[
				((mergeCollection at:lidx) < (withCollection at: ridx))ifTrue:[
					ret add:(mergeCollection at:lidx).
					lidx:= lidx+1.
				] ifFalse:[
					ret add:(withCollection at:ridx).
					ridx:= ridx+1.
				]
			]ifFalse:[
				(lidx <= lsize)ifTrue:[
					ret add:(mergeCollection at:lidx).
					lidx:= lidx+1.
				]ifFalse:[
					ret add:(withCollection at:ridx).
					ridx:= ridx+1.
				]
			].
			inidx:= inidx+1.
		].
		^ret
	].

		
(Array(1 2 3) == Array(1 2 3 )) ifFalse:[
	`Array(1 2 3) no match` println.
	exit].
	
a:=Array(7.1 6.1 5.1).
Sorter new heapSortArray:a rIndex:3.
(a matchCollection:Array(5.1 6.1 7.1))ifFalse:[
	`Array(1 2 3) no match` println.
	exit].
	
	

a:=Array(7.1 6.1 5.1 4.1 3.1 2.1 5.1).
Sorter new heapSortArray:a rIndex:7.
(a matchCollection:Array(2.1 3.1 4.1 5.1 5.1 6.1 7.1))ifFalse:[
	`Array(2.1 3.1 4.1 5.1 5.1 6.1 7.1) no match` println.
	exit].

a:=Array(6.1 7.1 5.1).
Sorter new heapSortArray:a rIndex:3.
(a matchCollection:Array(5.1 6.1 7.1))ifFalse:[
	`Array(5.1 6.1 7.1) no match` println.
	exit].	

a:=Array(2.0 2.0).
Sorter new quickSortArrayNRO:a left:1 right:2.
(a matchCollection:Array(2.0 2.0))ifFalse:[
	`Array(2.0 2.0) no match` println.
	exit].	
		
	
a:=Array(2.0 2.0).
Sorter new quickSortArrayNR:a left:1 right:2.
(a matchCollection:Array(2.0 2.0))ifFalse:[
	`Array(2.0 2.0) no match` println.
	exit].	

	
a:=Array(7.1 6.1 5.1 4.1 3.1 2.1 5.1).
Sorter new quickSortArrayNR:a left:1 right:7.
(a matchCollection:Array(2.1 3.1 4.1 5.1 5.1 6.1 7.1))ifFalse:[
	`Array(2.1 3.1 4.1 5.1 5.1 6.1 7.1) no match` println.
	exit].	
	
a:=Array(1.1 6.1 5.1 4.1 3.1 2.1 7.1).
Sorter new quickSortArrayNR:a left:1 right:7.
(a matchCollection:Array(1.1 2.1 3.1 4.1 5.1 6.1 7.1))ifFalse:[
	`Array(1.1 2.1 3.1 4.1 5.1 6.1 7.1) no match` println.
	exit].	


a:=Array(7.1 6.1 5.1 4.1 3.1 2.1 1.1).
Sorter new quickSortArrayNR:a left:1 right:7.
(a matchCollection:Array(1.1 2.1 3.1 4.1 5.1 6.1 7.1))ifFalse:[
	`Array(1.1 2.1 3.1 4.1 5.1 6.1 7.1) no match` println.
	exit].	


a:=Array(4 3 2 1).
Sorter new quickSortArrayNR:a left:1 right:4.
(a matchCollection:Array(1 2 3 4))ifFalse:[
	`Array(1 2 3 4) no match` println.
	exit].	

	
a:=Array(3 2 1).
Sorter new quickSortArrayNR:a left:1 right:3.
(a matchCollection:Array(1 2 3))ifFalse:[
	`Array(1 2 3) no match` println.
	exit].		
	
a:=Array(2 1).
Sorter new quickSortArrayNR:a left:1 right:2.
(a matchCollection:Array(1 2 ))ifFalse:[
	`Array(1 2) no match` println.
	exit].	
	
a:=Array(1).
Sorter new quickSortArrayNR:a left:1 right:1.
(a matchCollection:Array(1))ifFalse:[
	`Array(1) no match` println.
	exit].


a:=Array(2.0 2.0).
Sorter new quickSortArray:a l:1 r:2.
(a matchCollection:Array(2.0 2.0))ifFalse:[
	`Array(2.0 2.0) no match` println.
	exit].	

a:=Array(7.1 6.1 5.1 4.1 3.1 2.1 1.1).
Sorter new quickSortArray:a l:1 r:7.
(a matchCollection:Array(1.1 2.1 3.1 4.1 5.1 6.1 7.1))ifFalse:[
	`Array(1.1 2.1 3.1 4.1 5.1.6.1 7.1) no match` println.
	exit].	

a:=Array(4 3 2 1).
Sorter new quickSortArray:a l:1 r:4.
(a matchCollection:Array(1 2 3 4))ifFalse:[
	`Array(1 2 3 4) no match` println.
	exit].

a:=Array(3 2 1).
Sorter new quickSortArray:a l:1 r:3.
(a matchCollection:Array(1 2 3))ifFalse:[
	`Array(1 2 3) no match` println.
	exit].
	
	
a:=Array(2 1).
Sorter new quickSortArray:a l:1 r:2.
(a matchCollection:Array(1 2))ifFalse:[
	`Array(1 2) no match` println.
	exit].

a:=Array(1).
Sorter new quickSortArray:a l:1 r:1.
(a matchCollection:Array(1))ifFalse:[
	`Array(1) no match` println.
	exit].


a:=Array(5.1 7.1 6.1 4.1).
ret:= Sorter new 	partitionArray:a l:1 r:4.
((a at:1) == 4.1) ifFalse:[
   `first element must be 5.1 test Failed` println.exit].

a:=Array(5.1 7.1 6.1).
ret:= Sorter new 	partitionArray:a l:1 r:3.
((a at:1) == 5.1) ifFalse:[
   `first element must be 5.1 test Failed` println.exit].


a:=Array(7.1 5.1 6.1).
ret:= Sorter new 	partitionArray:a l:1 r:3.
((a at:1) == 5.1) ifFalse:[
   `first element must be 5.1 test Failed` println.exit].

a:=Array(7.1 6.1 5.1).
ret:= Sorter new 	partitionArray:a l:1 r:3.
((a at:1) == 5.1) ifFalse:[
   `first element must be 5.1 test Failed` println. exit].

a:=Array(7.1 6.1).
ret:= Sorter new 	partitionArray:a l:1 r:2.
((a at:1) == 6.1) ifFalse:[
   `first element must be 6.1 test Failed` println. exit].

a:=Array(6.1 7.1).
ret:= Sorter new 	partitionArray:a l:1 r:2.
((a at:1) == 6.1) ifFalse:[
   `first element must be 6.1 test Failed` println.exit].

a:=Array(7.1).
((a at:1) == 7.1) ifFalse:[
   `first element must be 1.1 test Failed` println.
   exit].
	
a:=Array(4.0 3.0). 
Sorter new 	selectionSortArray:a.
x:=(a at:1).
((a at:1) == 3.0) ifFalse:[

   `first element must be 3.0 test Failed` println.
   exit].

a:= Array(1.0).
Sorter new 	selectionSortArray:a.
((a at:1) == 1.0) ifFalse:[
   `first element must be 1.0 test Failed` println.
   exit].
 
a:=Array(2.0 3.0).
Sorter new 	selectionSortArray:a.  
((a at:1) == 2.0) ifFalse:[
   `first element must be 2.0 test Failed` println.
   exit].
   
a:=Array(20.0 30.0 10.0).
Sorter new 	selectionSortArray:a.  
((a at:1) == 10.0) ifFalse:[
   `first element must be 2.0 test Failed` println.
   exit].
   
a:=Array(11.0).
Sorter new 	selectionSortArray:a.  
((a at:1) == 11.0) ifFalse:[
   `first element must be 11.0 test Failed` println.
   exit].

a:=Array(11.0 9.0).
Sorter new 	selectionSortArray:a.  
((a at:1) == 9.0) ifFalse:[
   `first element must be 9.0 test Failed` println.
   exit].

a:=Array(11.0 9.0 8.0).
Sorter new 	selectionSortArray:a.  
((a at:1) == 8.0) ifFalse:[
   `first element must be 8.0 test Failed` println.
   exit].

a:= Array(100.0).

Sorter new 	insertionSortArray:a.
((a at:1) == 100.0) ifFalse:[
   `first element must be 100.0 test Failed` println.
   exit].
  
a:=Array(400.0 300.0). 
Sorter new 	insertionSortArray:a.
((a at:1) == 300.0) ifFalse:[
   `first element must be 300.0 test Failed` println.
   exit].
   
a:=Array(400.0 300.0 50.0). 
Sorter new 	insertionSortArray:a.
((a at:1) == 50.0) ifFalse:[
   `first element must be 50.0 test Failed` println.
   exit].
   
((a at:3) == 400.0) ifFalse:[
   `third element must be 400.0 test Failed` println.
   exit].   

a:= Array(102.0).
Sorter new 	bubbleSortArray:a.
((a at:1) == 102.0) ifFalse:[
   `first element must be 102.0 test Failed` println.
   exit].
  
a:=Array(402.0 302.0). 
Sorter new 	bubbleSortArray:a.
((a at:1) == 302.0) ifFalse:[
   `first element must be 302.0 test Failed` println.
   exit].


a:=Array(402.0 302 52.0). 
Sorter new 	bubbleSortArray:a.
((a at:1) == 52.0) ifFalse:[
   `first element must be 50.0 test Failed` println.
   exit].

a:=Array(7.0 6.0 5.0 4.0 3.0 2.0 1.0)
Sorter new 	shellSortArray:a.
((a at:1) == 1.0) ifFalse:[
   `first element must be 1.0 test Failed` println.
   exit].
((a at:2) == 2.0) ifFalse:[
   `second element must be 2.0 test Failed` println.
   exit].
  
a:=Array(7.1 6.1 5.1 4.1 3.1 2.1 1.1).
Sorter new 	quickSortArray:a l:1 r:7.

((a at:1) == 1.1) ifFalse:[
   `first element must be 1.1 test Failed` println.
   exit].
((a at:2) == 2.1) ifFalse:[
   `second element must be 2.1 test Failed` println.
   exit].         

m:= Sorter new mergeCollection:Array(1) withCollection:Array(2).
(m matchCollection:Array(1 2))ifFalse:
	[`merge Collection failed target Array(1 2)` println.exit].

m:= Sorter new mergeCollection:Array(1 3) withCollection:Array(2).
(m matchCollection:Array(1 2 3))ifFalse:
	[`merge Collection failed target Array(1 2 3)` println.exit].

m:= Sorter new mergeCollection:Array(1 3) withCollection:Array(2 5).
(m matchCollection:Array(1 2 3 5))ifFalse:
	[`merge Collection failed target Array(1 2 3 5)` println.exit].

m:= Sorter new mergeCollection:Array(1 3) withCollection:Array(2 5 7 9).
(m matchCollection:Array(1 2 3 5 7 9))ifFalse:
	[`merge Collection failed target Array(1 2 3 5 7 9)` println.exit].


m:= Sorter new mergeCollection:Array(1 3 10) withCollection:Array(2 5 7 9).
(m matchCollection:Array(1 2 3 5 7 9 10))ifFalse:
	[`merge Collection failed target Array(1 2 3 5 7 9 10)` println.exit].
	


`Sorter test passed` println.      